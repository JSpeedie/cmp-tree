#!/usr/bin/env bash

num_calls=100
first_dir="/home/me/kingston1"
second_dir="/home/me/kingston2"
# num_calls=100
# first_dir="/home/me/Books1/"
# second_dir="/home/me/Books2"

# If the 0th commandline argument is a non-empty string
if [[ -n "$0" ]]; then
	if [[ "$0" != "./speed-test" ]] && [[ "$0" != "speed-test" ]]; then
		# This script runs a series of `cd` commands and makes reaches up the
		# directory tree. In order to make do these successfully, the script
		# must be ran in a certain manner and specifically it must be launched
		# from the directory it resides in.
		echo "ERROR: This script must be launched from the directory it resides in."
		echo "Acceptable ways of launching the script are:"
		echo "    speed-test"
		echo "    ./speed-test"
		echo "Exiting..."
		exit 1
	fi
fi

bash_tests() {
	# {{{
	cd bash/cmp-tree
	# Check that our executable is available and working
	let tests_passed=0
	# This command should succeed
	if ./cmp-tree ../../tests/001/first ../../tests/001/first &> /dev/null; then
		let tests_passed+=1
	fi
	if [ $tests_passed -ge 1 ]; then
		echo "Running Bash version of cmp-tree $num_calls times..."
		printf "" > ../../speed-test.bash.out
		start=$(date +%s.%N)

		for i in $(seq $num_calls); do
			./cmp-tree ${first_dir} ${second_dir} >> ../../speed-test.bash.out
		done

		end=$(date +%s.%N)
		total_execution_time=$(echo "$end - $start" | bc -l)
		average_execution_time=$(echo "($end - $start) / $num_calls" | bc -l)

		echo "cmp-tree (Bash): $num_calls calls took a total of ${total_execution_time}s"
		echo "cmp-tree (Bash): On average, each execution took ${average_execution_time}s"
	else
		echo "ERROR: Bash version of cmp-tree either does not exist or is not working correctly. Skipping..."
	fi

	cd ../..
	# }}}
}


cpp_tests() {
	# {{{
	cd cpp/cmp-tree
	# Check that our executable is available and working
	let tests_passed=0
	# This command should succeed
	if ./release/cmp-tree ../../tests/001/first ../../tests/001/first &> /dev/null; then
		let tests_passed+=1
	fi
	if [ $tests_passed -ge 1 ]; then
		echo "Running C++ version of cmp-tree $num_calls times..."
		printf "" > ../../speed-test.cpp.out
		start=$(date +%s.%N)

		for i in $(seq $num_calls); do
			./release/cmp-tree ${first_dir} ${second_dir} >> ../../speed-test.cpp.out
		done

		end=$(date +%s.%N)
		total_execution_time=$(echo "$end - $start" | bc -l)
		average_execution_time=$(echo "($end - $start) / $num_calls" | bc -l)

		echo "cmp-tree (C++): $num_calls calls took a total of ${total_execution_time}s"
		echo "cmp-tree (C++): On average, each execution took ${average_execution_time}s"
	else
		echo "ERROR: C++ version of cmp-tree either does not exist or is not working correctly. Skipping..."
	fi

	cd ../..
	# }}}
}


c_tests() {
	# {{{
	cd c/cmp-tree
	# Check that our executable is available and working
	let tests_passed=0
	# This command should succeed
	if ./release/cmp-tree ../../tests/001/first ../../tests/001/first &> /dev/null; then
		let tests_passed+=1
	fi
	if [ $tests_passed -ge 1 ]; then
		echo "Running C version of cmp-tree $num_calls times..."
		printf "" > ../../speed-test.c.out
		start=$(date +%s.%N)

		for i in $(seq $num_calls); do
			./release/cmp-tree ${first_dir} ${second_dir} >> ../../speed-test.c.out
		done

		end=$(date +%s.%N)
		total_execution_time=$(echo "$end - $start" | bc -l)
		average_execution_time=$(echo "($end - $start) / $num_calls" | bc -l)

		echo "cmp-tree (C): $num_calls calls took a total of ${total_execution_time}s"
		echo "cmp-tree (C): On average, each execution took ${average_execution_time}s"
	else
		echo "ERROR: C version of cmp-tree either does not exist or is not working correctly. Skipping..."
	fi

	cd ../..
	# }}}
}


rust_tests() {
	# {{{
	cd rust/cmp-tree
	# Check that our executable is available and working
	let tests_passed=0
	# This command should succeed
	if ./target/release/cmp-tree ../../tests/001/first ../../tests/001/first &> /dev/null; then
		let tests_passed+=1
	fi
	if [ $tests_passed -ge 1 ]; then
		echo "Running Rust version of cmp-tree $num_calls times..."
		printf "" > ../../speed-test.rust.out
		start=$(date +%s.%N)

		for i in $(seq $num_calls); do
			./target/release/cmp-tree ${first_dir} ${second_dir} >> ../../speed-test.rust.out
		done

		end=$(date +%s.%N)
		total_execution_time=$(echo "$end - $start" | bc -l)
		average_execution_time=$(echo "($end - $start) / $num_calls" | bc -l)

		echo "cmp-tree (Rust): $num_calls calls took a total of ${total_execution_time}s"
		echo "cmp-tree (Rust): On average, each execution took ${average_execution_time}s"
	else
		echo "ERROR: Rust version of cmp-tree either does not exist or is not working correctly. Skipping..."
	fi

	cd ../..
	# }}}
}


python_tests() {
	# {{{
	cd python/cmp-tree
	# Check that our executable is available and working
	let tests_passed=0
	# This command should succeed
	if python cmp-tree.py ../../tests/001/first ../../tests/001/first &> /dev/null; then
		let tests_passed+=1
	fi
	if [ $tests_passed -ge 1 ]; then
		echo "Running Python version of cmp-tree $num_calls times..."
		printf "" > ../../speed-test.python.out
		start=$(date +%s.%N)

		for i in $(seq $num_calls); do
			python cmp-tree.py ${first_dir} ${second_dir} >> ../../speed-test.python.out
		done

		end=$(date +%s.%N)
		total_execution_time=$(echo "$end - $start" | bc -l)
		average_execution_time=$(echo "($end - $start) / $num_calls" | bc -l)

		echo "cmp-tree (Python): $num_calls calls took a total of ${total_execution_time}s"
		echo "cmp-tree (Python): On average, each execution took ${average_execution_time}s"
	else
		echo "ERROR: Python version of cmp-tree either does not exist or is not working correctly. Skipping..."
	fi

	cd ../..
	# }}}
}


diff_tests() {
	# {{{
	echo "Running diff $num_calls times..."
	start=$(date +%s.%N)

	for i in $(seq $num_calls); do
		diff -qr ${first_dir} ${second_dir} &> /dev/null
	done

	end=$(date +%s.%N)
	total_execution_time=$(echo "$end - $start" | bc -l)
	average_execution_time=$(echo "($end - $start) / $num_calls" | bc -l)

	echo "diff: $num_calls calls took a total of ${total_execution_time}s"
	echo "diff: On average, each execution took ${average_execution_time}s"
	# }}}
}


rsync_tests() {
	# {{{
	echo "Running rsync $num_calls times..."
	start=$(date +%s.%N)

	for i in $(seq $num_calls); do
		# It's important to note a couple things about the rsync command used
		# here: First, the command does not exit with a non-zero exit code if
		# there are any differences in the two directory trees. Second, you
		# must end the path to the directories that root each directory tree
		# with a "/".
		rsync -nrvc --delete kingston1/ kingston2/ &> /dev/null
	done

	end=$(date +%s.%N)
	total_execution_time=$(echo "$end - $start" | bc -l)
	average_execution_time=$(echo "($end - $start) / $num_calls" | bc -l)

	echo "rsync: $num_calls calls took a total of ${total_execution_time}s"
	echo "rsync: On average, each execution took ${average_execution_time}s"
	# }}}
}


# bash_tests
cpp_tests
c_tests
rust_tests
python_tests
# diff_tests
# rsync_tests
